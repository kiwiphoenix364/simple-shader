<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ShaderPack {&#13;" line1="    private colorNames: string[]&#13;" line2="    private shaderColorSets: any[]&#13;" line3="    constructor(colorNames: string[], shaderColorSets: any[]) {&#13;" line4="        this.colorNames = colorNames&#13;" line5="        this.shaderColorSets = shaderColorSets&#13;" line6="    }&#13;" line7="    unpack () {&#13;" line8="        let buf = Buffer.create(16)&#13;" line9="        for (let i = 0; i &lt; this.shaderColorSets.length; i++) {&#13;" line10="            buf = buf.concat(this.shaderColorSets[i])&#13;" line11="        }&#13;" line12="        return buf&#13;" line13="    }&#13;" line14="    getTintIdx (color: string) {&#13;" line15="        return this.colorNames.indexOf(color) + 1&#13;" line16="    }&#13;" line17="    static get (shader: string) {&#13;" line18="        let packNames = [&quot;default&quot;]&#13;" line19="        let packs = [&#13;" line20="            new ShaderPack(&#13;" line21="                [&quot;light&quot;, &quot;light2&quot;, &quot;dark&quot;, &quot;dark2&quot;, &quot;yellow&quot;, &quot;yellow2&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;],&#13;" line22="                [&#13;" line23="                    [0, 1, 3, 1, 5, 1, 7, 5, 6, 1, 11, 13, 11, 1, 2, 14],&#13;" line24="                    [0, 1, 1, 1, 1, 1, 5, 1, 7, 1, 13, 1, 13, 1, 3, 2],&#13;" line25="                    [0, 13, 14, 2, 2, 7, 8, 6, 12, 6, 12, 12, 15, 14, 15, 15],&#13;" line26="                    [0, 14, 15, 14, 14, 6, 12, 8, 15, 8, 15, 15, 15, 15, 15, 15],&#13;" line27="                    [0, 13, 4, 4, 5, 5, 7, 5, 6, 13, 11, 13, 11, 5, 13, 14],&#13;" line28="                    [0, 5, 5, 5, 5, 5, 5, 5, 7, 5, 13, 5, 13, 5, 5, 13],&#13;" line29="                    [0, 3, 2, 2, 2, 4, 11, 4, 10, 11, 2, 2, 10, 4, 2, 14],&#13;" line30="                    [0, 5, 4, 13, 5, 7, 7, 7, 6, 6, 12, 7, 7, 7, 5, 8],&#13;" line31="                    [0, 9, 10, 11, 12, 6, 8, 6, 8, 8, 12, 8, 8, 9, 12, 8],&#13;" line32="                    [0, 11, 10, 10, 11, 4, 10, 12, 10, 11, 10, 10, 10, 11, 12, 12]&#13;" line33="                ]&#13;" line34="            )&#13;" line35="        ]&#13;" line36="        /*&#13;" line37="        //for generating the &quot;2&quot; varients&#13;" line38="        let test = []&#13;" line39="        let sample = [0, 13, 4, 4, 5, 5, 7, 5, 6, 13, 11, 13, 11, 5, 13, 14]&#13;" line40="        for (let i = 0; i &lt; 16; i++) {&#13;" line41="            test.push(sample[sample[i]])&#13;" line42="        }&#13;" line43="        console.log(test)&#13;" line44="        */&#13;" line45="        return packs[packNames.indexOf(shader)]&#13;" line46="    }&#13;" line47="}" numlines="48"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Shader {&#13;" line1="    //Declare initial variables&#13;" line2="    /*&#13;" line3="    lookup table&#13;" line4="    lkupx16: Buffer&#13;" line5="    */&#13;" line6="    //Shader pack&#13;" line7="    public currentShader: ShaderPack&#13;" line8="    //Decompiled shader pack&#13;" line9="    private colbuf: Buffer&#13;" line10="    //Shader augment image&#13;" line11="    public mapLayer: Image&#13;" line12="    //Render and shader buffers&#13;" line13="    private renderBuf: Buffer&#13;" line14="    private shaderBuf: Buffer&#13;" line15="    //zValue&#13;" line16="    private zValue: number&#13;" line17="    //Renderable for shader&#13;" line18="    private shader: scene.Renderable&#13;" line19="    constructor(currentShader: ShaderPack, zValue: number) {&#13;" line20="        /*&#13;" line21="        this.lkupx16 = Buffer.create(16)&#13;" line22="        for (let i = 0; i &lt; 16; i++) {&#13;" line23="            this.lkupx16[i] = (i * 16)&#13;" line24="        }&#13;" line25="        */&#13;" line26="        this.zValue = zValue&#13;" line27="        this.currentShader = currentShader&#13;" line28="        //Unpack Shaderpack&#13;" line29="        this.colbuf = this.currentShader.unpack()&#13;" line30="        //create buffer image&#13;" line31="        this.mapLayer = image.create(160, 120)&#13;" line32="        this.renderBuf = Buffer.create(120)&#13;" line33="        this.shaderBuf = Buffer.create(120)&#13;" line34="        this.shader = scene.createRenderable(this.zValue, (screenImg: Image, camera: scene.Camera) =&gt; {&#13;" line35="            for (let x = 0; x &lt; 160; ++x) {&#13;" line36="                screenImg.getRows(x, this.renderBuf)&#13;" line37="                this.mapLayer.getRows(x, this.shaderBuf)&#13;" line38="                for (let y = 0; y &lt; 120; ++y) {&#13;" line39="                    if (this.mapLayer.getPixel(x, y)) {&#13;" line40="                        this.renderBuf[y] = (this.colbuf[this.renderBuf[y] + Math.imul(this.shaderBuf[y], 16)])&#13;" line41="                    }&#13;" line42="                }&#13;" line43="                screenImg.setRows(x, this.renderBuf)&#13;" line44="            }&#13;" line45="        })&#13;" line46="    }&#13;" line47="    &#13;" line48="}" numlines="49"></mutation></block></next></block></statement></block></xml>