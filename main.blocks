<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=")Lpmw{=38M^tuCuVKm5C" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="pH{%~6@O2`#dnBVV[{O_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ShaderPack {&#13;" line1="    private colorNames: string[]&#13;" line2="    private shaderColorSets: any[]&#13;" line3="    constructor(colorNames: string[], shaderColorSets: any[]) {&#13;" line4="        this.colorNames = colorNames&#13;" line5="        this.shaderColorSets = shaderColorSets&#13;" line6="    }&#13;" line7="    unpack () {&#13;" line8="        //let buf = Buffer.create(16)&#13;" line9="        //for (let i = 0; i &lt; this.shaderColorSets.length; i++) {&#13;" line10="        //    buf = buf.concat(this.shaderColorSets[i])&#13;" line11="        //}&#13;" line12="        let buf = [Buffer.create(0)]&#13;" line13="        for (let i = 0; i &lt; this.shaderColorSets.length; i++) {&#13;" line14="            buf.push(Buffer.fromArray(this.shaderColorSets[i]))&#13;" line15="        }&#13;" line16="        return buf&#13;" line17="    }&#13;" line18="    getTintIdx (color: string) {&#13;" line19="        return this.colorNames.indexOf(color) + 1&#13;" line20="    }&#13;" line21="    static get (shader: string) {&#13;" line22="        //reference for shader pack format&#13;" line23="        //color sets and color set names are in respective orders in their arrays&#13;" line24="        //shader arrays go in order of colors, so the fifth item in the array ([4]) will be color four&#13;" line25="        let packNames = [&quot;default&quot;]&#13;" line26="        let packs = [&#13;" line27="            new ShaderPack(&#13;" line28="                [&quot;light&quot;, &quot;light2&quot;, &quot;dark&quot;, &quot;dark2&quot;, &quot;yellow&quot;, &quot;yellow2&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;],&#13;" line29="                [&#13;" line30="                    [15, 1, 3, 1, 5, 1, 7, 5, 6, 1, 11, 13, 11, 1, 2, 14],&#13;" line31="                    [0, 1, 1, 1, 1, 1, 5, 1, 7, 1, 13, 1, 13, 1, 3, 2],&#13;" line32="                    [0, 13, 14, 2, 2, 7, 8, 6, 12, 6, 12, 12, 15, 14, 15, 15],&#13;" line33="                    [0, 14, 15, 14, 14, 6, 12, 8, 15, 8, 15, 15, 15, 15, 15, 15],&#13;" line34="                    [0, 13, 4, 4, 5, 5, 7, 5, 6, 13, 11, 13, 11, 5, 13, 14],&#13;" line35="                    [0, 5, 5, 5, 5, 5, 5, 5, 7, 5, 13, 5, 13, 5, 5, 13],&#13;" line36="                    [0, 3, 2, 2, 2, 4, 11, 4, 10, 11, 2, 2, 10, 4, 2, 14],&#13;" line37="                    [0, 5, 4, 13, 5, 7, 7, 7, 6, 6, 12, 7, 7, 7, 5, 8],&#13;" line38="                    [0, 9, 10, 11, 12, 6, 8, 6, 8, 8, 12, 8, 8, 9, 12, 8],&#13;" line39="                    [0, 11, 10, 10, 11, 4, 10, 12, 10, 11, 10, 10, 10, 11, 12, 12]&#13;" line40="                ]&#13;" line41="            )&#13;" line42="        ]&#13;" line43="        /*&#13;" line44="        //for generating the &quot;2&quot; varients&#13;" line45="        let test = []&#13;" line46="        let sample = [0, 13, 4, 4, 5, 5, 7, 5, 6, 13, 11, 13, 11, 5, 13, 14]&#13;" line47="        for (let i = 0; i &lt; 16; i++) {&#13;" line48="            test.push(sample[sample[i]])&#13;" line49="        }&#13;" line50="        console.log(test)&#13;" line51="        */&#13;" line52="        return packs[packNames.indexOf(shader)]&#13;" line53="    }&#13;" line54="}" numlines="55"></mutation><next><block type="typescript_statement" id="eyN`PK;1MfLPbC6r1Q9C" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Shader {&#13;" line1="    //Declare initial variables&#13;" line2="    //lookup table&#13;" line3="    //lkupx16: Buffer&#13;" line4="    //Shader pack&#13;" line5="    private currentShader: ShaderPack&#13;" line6="    //Decompiled shader pack&#13;" line7="    private colbuf: Buffer[]&#13;" line8="    //Shader augment image&#13;" line9="    public mapLayer: Image&#13;" line10="    //Render and shader buffers&#13;" line11="    private renderBuf: Buffer&#13;" line12="    private shaderBuf: Buffer&#13;" line13="    //zValue&#13;" line14="    private zValue: number&#13;" line15="    //Renderable for shader&#13;" line16="    private shader: scene.Renderable&#13;" line17="    constructor(currentShader: ShaderPack, zValue: number) {&#13;" line18="        /*&#13;" line19="        //build lookup table&#13;" line20="        this.lkupx16 = Buffer.create(16)&#13;" line21="        for (let i = 0; i &lt; 16; i++) {&#13;" line22="            this.lkupx16[i] = (i * 16)&#13;" line23="        }&#13;" line24="        */&#13;" line25="        this.zValue = zValue&#13;" line26="        this.currentShader = currentShader&#13;" line27="        //Unpack Shaderpack&#13;" line28="        this.colbuf = this.currentShader.unpack()&#13;" line29="        //create buffer image&#13;" line30="        this.mapLayer = image.create(160, 120)&#13;" line31="        this.renderBuf = Buffer.create(120)&#13;" line32="        this.shaderBuf = Buffer.create(120)&#13;" line33="        this.shader = scene.createRenderable(this.zValue, (screenImg: Image, camera: scene.Camera) =&gt; {&#13;" line34="            for (let x = 0; x &lt; 160; ++x) {&#13;" line35="                screenImg.getRows(x, this.renderBuf)&#13;" line36="                this.mapLayer.getRows(x, this.shaderBuf)&#13;" line37="                for (let y = 0; y &lt; 120; ++y) {&#13;" line38="                    if (this.mapLayer.getPixel(x, y)) {&#13;" line39="                        this.renderBuf[y] = this.colbuf[this.shaderBuf[y]][this.renderBuf[y]]&#13;" line40="                        //use alternate compilation format&#13;" line41="                        //this.renderBuf[y] = (this.colbuf[this.renderBuf[y] + Math.imul(this.shaderBuf[y], 16)])&#13;" line42="                        //alt comp format + lookup table&#13;" line43="                        //this.renderBuf[y] = (this.colbuf[this.renderBuf[y] + this.lkupx16[this.shaderBuf[y]]])&#13;" line44="                    }&#13;" line45="                }&#13;" line46="                screenImg.setRows(x, this.renderBuf)&#13;" line47="            }&#13;" line48="        })&#13;" line49="    }&#13;" line50="    setNewShader (shader: ShaderPack) {&#13;" line51="        return shader.unpack()&#13;" line52="    }&#13;" line53="}" numlines="54"></mutation></block></next></block></statement></block></xml>